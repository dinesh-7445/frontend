<?php
/**
 * ViraXpress - https://www.viraxpress.com
 *
 * LICENSE AGREEMENT
 *
 * This file is part of the ViraXpress package and is licensed under the ViraXpress license agreement.
 * You can view the full license at:
 * https://www.viraxpress.com/license
 *
 * By utilizing this file, you agree to comply with the terms outlined in the ViraXpress license.
 *
 * DISCLAIMER
 *
 * Modifications to this file are discouraged to ensure seamless upgrades and compatibility with future releases.
 *
 * @author      ViraXpress
 * @copyright   Â© 2024 ViraXpress (https://www.viraxpress.com/)
 * @license     https://www.viraxpress.com/license
 */

/** @var Magento\Wishlist\Block\Catalog\Product\ProductList\Item\AddTo\Wishlist $block */

use Magento\Catalog\Model\Product\Type as CatalogProductType;
use Magento\Downloadable\Model\Product\Type as DownloadableProductType;
?>
<?php if ($this->helper(\Magento\Wishlist\Helper\Data::class)->isAllow()): ?>
    <div class="action-wishlist">
        <?php
        $wishlistParams = json_decode($block->getUpdateParams(), true);
        $product = $block->getProduct();
        $params = [];

        if (!empty($wishlistParams['data'])) {
            $params = [
                'product' => $wishlistParams['data']['product'] ?? null,
                'uenc' => $wishlistParams['data']['uenc'] ?? null,
                'id' => $wishlistParams['data']['id'] ?? null,
                'qty' => $wishlistParams['data']['qty'] ?? null,
            ];
        }

        $url = $wishlistParams['action'] ?? $block->getUrl('wishlist/index/updateItemOptions');

        $formId = base64_encode($params['product'] . "-product_view_wishlist_form");
        $formId = preg_replace("/[^a-zA-Z0-9]/", "", $formId);
        $wishlistFormId = $formId;

        if ($product->getTypeId() === CatalogProductType::TYPE_SIMPLE && !empty($product->getOptions()) || $product->getTypeId() === DownloadableProductType::TYPE_DOWNLOADABLE) {
            $formId = 'product_addtocart_form';
        }
        ?>
        <form id="<?= $escaper->escapeHtmlAttr($wishlistFormId) ?>" x-data="updateWishlist()">
            <input type="hidden" name="product" value="<?= $escaper->escapeHtmlAttr($params['product']) ?>" />
            <input type="hidden" name="uenc" value="<?= $escaper->escapeHtmlAttr($params['uenc']) ?>" />
            <input type="hidden" name="id" value="<?= $escaper->escapeHtmlAttr($params['id']) ?>" />
            <input type="hidden" data-input='wishlist-qty' name="qty" value="<?= $escaper->escapeHtmlAttr($params['qty']) ?>" />
            <button type="button" @click="updateWishlistPdp('<?= $escaper->escapeHtmlAttr($formId) ?>', '<?= $escaper->escapeUrl($url) ?>')" role="button" title="<?= $escaper->escapeHtml(__('Update Wish List')) ?>" class="updated group p-2 h-10 w-10 rounded-full bg-slate-200 text-gray-700">
                <span class="sr-only"><?= $escaper->escapeHtml(__('Update Wish List')) ?></span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" data-slot="icon" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"></path>
                </svg>
            </button>
        </form>
    </div>
    <script>
        function updateWishlist() {
            return {
                qtyElements: document.getElementById("qty"),
                handleDecrementPDP: document.getElementById("handleDecrementPDP"),
                handleIncrementPDP: document.getElementById("handleIncrementPDP"),
                init() {
                    if (this.qtyElements) {
                        this.updateWishlistForm(this.qtyElements.name, this.qtyElements.value);
                    }
                    this.qtyElements.addEventListener('change', () => {
                        this.updateWishlistForm(this.qtyElements.name, this.qtyElements.value);
                    });
                    this.handleDecrementPDP.addEventListener('click', () => {
                        var qtyElement = document.getElementById('qty');
                        this.updateWishlistForm(qtyElement.name, qtyElement.value);
                    });
                    this.handleIncrementPDP.addEventListener('click', () => {
                        var qtyElement = document.getElementById('qty');
                        this.updateWishlistForm(qtyElement.name, qtyElement.value);
                    });

                    setTimeout(() => {
                        if (document.getElementById("bundle-slide")) {
                            const button = document.getElementById("bundle-slide");
                            button.click();
                        }
                    }, 1000)
                },

                updateWishlistForm(name, value) {
                    let wishlistForm = document.getElementById('<?= $escaper->escapeHtmlAttr($formId) ?>');
                    if (wishlistForm && value) {
                        let wishlistQtyElement = wishlistForm.querySelector("input[name='" + name + "']");
                        if (wishlistQtyElement) {
                            wishlistQtyElement.value = value;
                        } else {
                            let newWishlistQtyElement = document.createElement("input");
                            newWishlistQtyElement.type = "hidden";
                            newWishlistQtyElement.name = name;
                            newWishlistQtyElement.value = value;
                            wishlistForm.appendChild(newWishlistQtyElement);
                        }
                    }
                },
            }
        }

        function updateWishlistPdp(formId, url) {
            var form1 = document.getElementById('product_addtocart_form');
            var form2 = document.getElementById(formId);
            const formData = new FormData();

            const formKeys = new Set();

            Array.from(new FormData(form1)).forEach(([key, value]) => {
                if (value && !formKeys.has(key)) {
                    formData.append(key, value);
                    formKeys.add(key);
                }
            });

            Array.from(new FormData(form2)).forEach(([key, value]) => {
                if (value && !formKeys.has(key)) {
                    formData.append(key, value);
                    formKeys.add(key);
                }
            });

            formData.append('form_key', getFormKeyCookie());

            fetch(url, {
                method: 'POST',
                body: formData,
                credentials: 'include'
            }).then(response => {
                if (response.ok) {
                    if (response.redirected) {
                        if (window.location.href != response.url) {
                            window.location.href = response.url;
                        } else {
                            getCookie('mage-messages');
                        }
                    }
                } else {
                    console.error('Error:', response.status);
                }
            }).catch(error => {
                console.error('Fetch error:', error);
            });
        };
    </script>
<?php endif; ?>