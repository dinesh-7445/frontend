<?php
/**
 * ViraXpress - https://www.viraxpress.com
 *
 * LICENSE AGREEMENT
 *
 * This file is part of the ViraXpress package and is licensed under the ViraXpress license agreement.
 * You can view the full license at:
 * https://www.viraxpress.com/license
 *
 * By utilizing this file, you agree to comply with the terms outlined in the ViraXpress license.
 *
 * DISCLAIMER
 *
 * Modifications to this file are discouraged to ensure seamless upgrades and compatibility with future releases.
 *
 * @author      ViraXpress
 * @copyright   Â© 2024 ViraXpress (https://www.viraxpress.com/)
 * @license     https://www.viraxpress.com/license
 */
// phpcs:disable Magento2.Templates.ThisInTemplate.FoundThis

/* @var $block \Magento\Framework\View\Element\Template */
?>
<div class="block-compare block w-full" @set-compareproducts.window="comparableProducts = $event.detail" x-data="listCompareProducts()" :class="{ 'hidden': !comparableProducts.count }">
    <div class="block-title block">
        <h2 class="text-base xl:text-lg font-semibold mb-5 flex justify-start items-center gap-x-2">
            <span role="heading" aria-level="2">
                <?= $escaper->escapeHtml(__('Compare Products')) ?>
            </span>
            <span class="inline-block font-regular" x-text="'(' + comparableProducts.count + ')'"></span>
        </h2>
    </div>
    <div x-show="comparableProducts.count !== 0" style="display: none;">
        <ul class="compare-list space-y-3">
            <template x-for="product in comparableProducts.items" :key="product.id">
                <li class="grid grid-cols-12 gap-x-2 mb-4 bg-gray-50 rounded-md border border-gray-100 p-2">
                    <a :href="product.product_url" class="col-span-2 block border border-gray-100" aria-hidden="true" tabindex="-1">
                        <img class="w-full" :src="product.image_url" :alt="product.name" loading="eager" fetchpriority="high">
                    </a>
                    <div class="col-span-10 text-sm leading-6 flex justify-between items-center gap-x-2">
                        <a :href="product.product_url" class="font-medium break-words" :title="product.name" x-html="product.name"></a>
                        <button type="button" x-on:click.prevent="handleCompareProductRemove" x-bind:data-item-id="product.id" class="text-red-600" title="Remove">
                            <span class="sr-only"><?= $escaper->escapeHtml(__('Remove This Item')) ?></span>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" viewBox="0 0 24 24" width="20" height="20" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m19 7-.867 12.142A2 2 0 0 1 16.138 21H7.862a2 2 0 0 1-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v3M4 7h16"></path>
                            </svg>
                        </button>
                    </div>
                </li>
            </template>
        </ul>

        <div class="block-actions flex justify-between items-center gap-2 mt-5">
            <button x-on:click.prevent="handleCompareProductClearAll" class="action compare text-red-600 underline text-sm" hx-target="#html-body" >
                <span><?= $escaper->escapeHtml(__('Clear All')) ?></span>
            </button>
            <a x-bind:href="comparableProducts.listUrl" class="action compare primary-btn">
                <span>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3"></path>
                    </svg>
                </span>
                <span><?= $escaper->escapeHtml(__('Compare')) ?></span>
            </a>
        </div>
    </div>
    <p x-show="comparableProducts.count == 0" class="text-base"><?= $escaper->escapeHtml(__('You have no items to compare.')) ?></p>
</div>
<script>
    async function fetchCustomerDataSection(section) {
        try {
            const response = await getCustomerDataSections(section);
            return response[section];
        } catch (error) {
            console.error('Error fetching customer data section:', error);
            return [];
        }
    }

    function listCompareProducts() {
        return {
            comparableProducts: [],

            async init() {
                const cacheKey = 'vira-mage-cache-storage';
                const cachedData = localStorage.getItem(cacheKey);
                if (cachedData) {
                    const parsedData = JSON.parse(cachedData);
                    if (parsedData['compare-products'].count >= 1) {
                        const compareProducts = await fetchCustomerDataSection('compare-products');
                        if (compareProducts) {
                            this.comparableProducts = compareProducts;
                        }
                    }
                }

                this.$watch('comparableProducts', (value) => this.$dispatch('set-compareproducts', value));
            },

            async handleCompareProductRemove(event) {
                const itemId = event.currentTarget.getAttribute('data-item-id');
                const formKey = getFormKeyCookie();

                const url = '<?= $escaper->escapeUrl($block->getUrl("catalog/product_compare/remove")) ?>' +
                    '?product=' + itemId +
                    '&form_key=' + encodeURIComponent(formKey) +
                    '&confirmation=true';

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });

                    getCookie('mage-messages');

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    this.comparableProducts = await fetchCustomerDataSection('compare-products');
                } catch (error) {
                    console.error('There was a problem with the fetch operation:', error);
                }
            },

            async handleCompareProductClearAll(event) {
                const formKey = getFormKeyCookie();

                const url = '<?= $escaper->escapeUrl($block->getUrl('catalog/product_compare/clear')) ?>' +
                    '?form_key=' + encodeURIComponent(formKey) +
                    '&confirmation=true';

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });

                    getCookie('mage-messages');

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    this.comparableProducts = await fetchCustomerDataSection('compare-products');
                } catch (error) {
                    console.error('There was a problem with the fetch operation:', error);
                }
            }
        };
    }
</script>
